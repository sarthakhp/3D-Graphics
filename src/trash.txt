lines.push_back({Point3D(0,0,0), Point3D(0,0,9)});
lines.push_back({Point3D(-3,0,0), Point3D(3,0,0)});
lines.push_back({Point3D(0,-2,0), Point3D(0,2,0)});

// 2d object 'obj' to 2d object 'tempobj'
tempobj.center = find_intersection(view_window, Ray(view_point, obj.center)).to_2d(view_window.p1, view_window.p2, view_window.p4, MAIN_VIEW_WIDTH, MAIN_VIEW_HEIGHT);
tempobj.edges = obj.edges;
tempobj.polygons = obj.polygons;
tempobj.colors = obj.colors;
tempobj.points = vector<Point>(0);
for (int i = 0; i < obj.points.size(); i++)
{
    tempobj.points.push_back(find_intersection(view_window, Ray(view_point, obj.points[i])).to_2d(view_window.p1, view_window.p2, view_window.p4, MAIN_VIEW_WIDTH, MAIN_VIEW_HEIGHT));
}
// clip_2d_polygon();




	cout << "--------------------" << endl;

	Frame f = Frame(Ray(Point3D(0, 0, -1), Point3D()), 1, 1, Ray(Point3D(0, 0, 0), Point3D(0, 1, 0)));
	f.p1.print(1);
	Object2D o = newPlane(1, Ray(Point3D(0, -1, 0), Point3D(0, 0, 0))).object_to_2d(f, Point3D(0, 0, -2));
	o.points = {
		Point(100, 100),
		Point(200, 300),
		Point(-100, 600),
		Point(500, 300)
	};
	for (auto &i : o.points)
	{
		i.print(1);
	}
	cout << endl;
	o = o.clip_object_2(Point(400,400));
	for (auto &i : o.points)
	{
		i.print(1);
	}
	for (auto &pi: o.polygons[0]){
		cout << pi << " ";
	}
	cout << endl;


	// intersection_between_two_lines({Point(10,250),Point(-50,50)},{Point(0,0), Point(0,400)}).first.print(1);

	int somen = 0;
	cout <<endl << "press any key...";
	// cin >> somen;
	// return 0;



//// OLD functions : 

void get_old_objects(){
	// objects.insert({"cube", Cube().lines});
	// objects.insert({"axes", Axes().lines});
	

	for (auto &i : objects)
	{
		for (int j = 0; j < i.second.size(); j++)
		{
			lines.push_back(i.second[j]);
		}
	}
}

